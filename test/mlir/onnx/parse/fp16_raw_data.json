// RUN: onnx-mlir --EmitONNXBasic --printIR %s | FileCheck %s

// fp16_naw_data.json is an onnx model that outputs 2 constant tensors
// with float16 and bfloat16 data types
// and with the data represented as raw_data byte arrays

// json is generated with utils/testing/fp16_data.py raw
{
  "irVersion": "8",
  "graph": {
    "node": [
      {
        "output": [
          "output_f16"
        ],
        "opType": "Constant",
        "attribute": [
          {
            "name": "value",
            "t": {
              "dims": [
                "2"
              ],
              "dataType": 10,
              "name": "tensor_f16",
              "rawData": "ALzgcA=="
            },
            "type": "TENSOR"
          }
        ]
      },
      {
        "output": [
          "output_bf16"
        ],
        "opType": "Constant",
        "attribute": [
          {
            "name": "value",
            "t": {
              "dims": [
                "2"
              ],
              "dataType": 16,
              "name": "tensor_bf16",
              "rawData": "gL8cRg=="
            },
            "type": "TENSOR"
          }
        ]
      }
    ],
    "name": "fp16_raw_data",
    "output": [
      {
        "name": "output_f16",
        "type": {
          "tensorType": {
            "elemType": 10,
            "shape": {
              "dim": [
                {
                  "dimValue": "2"
                }
              ]
            }
          }
        }
      },
      {
        "name": "output_bf16",
        "type": {
          "tensorType": {
            "elemType": 16,
            "shape": {
              "dim": [
                {
                  "dimValue": "2"
                }
              ]
            }
          }
        }
      }
    ]
  },
  "opsetImport": [
    {
      "version": "16"
    }
  ]
}
// CHECK-LABEL:  func.func @main_graph
// CHECK-SAME:   () -> (tensor<2xf16>, tensor<2xbf16>) attributes {input_names = [], output_names = ["output_f16", "output_bf16"]} {
// CHECK-DAG:       [[VAR_0_:%.+]] = onnx.Constant dense<[-1.000000e+00, 9.984000e+03]> : tensor<2xf16>
// CHECK-DAG:       [[VAR_1_:%.+]] = onnx.Constant dense<[-1.000000e+00, 9.984000e+03]> : tensor<2xbf16>
// CHECK:           onnx.Return [[VAR_0_]], [[VAR_1_]] : tensor<2xf16>, tensor<2xbf16>
// CHECK:         }
