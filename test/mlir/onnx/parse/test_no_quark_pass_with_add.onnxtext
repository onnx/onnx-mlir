// RUN: onnx-mlir --EmitONNXIR --enable-quark-quantizer-legalization=true --printIR %s | FileCheck %s

// Here producer_name isn't 'quark.onnx'

<
   ir_version: 9,
   opset_import: ["" : 19],
   producer_name: "Not quark.onnx quantizer"
>

main (float[1,1,32,32] input) => (bfloat16[1,1,30,30] cast_out0)
<float[1,1,3,3] weight =  {0.0, 1.0, -1.0, 0.0, 1.0, 0.0, -1.0, 1.0, -1.0}, float[1] bias =  {1.5}>
{
   cast_in_bf16 = Cast <to: int = 16> (input)
   cast_weight_bf16 = Cast <to: int = 16> (weight)
   cast_bias_bf16 = Cast <to: int = 16> (bias)
   cast_in0 = Cast <to: int = 1> (cast_in_bf16)
   cast_weight = Cast <to: int = 1> (cast_weight_bf16)
   cast_bias = Cast <to: int = 1> (cast_bias_bf16)
   conv0 = Conv <dilations: ints = [1, 1], group: int = 1, kernel_shape: ints = [3, 3], pads: ints = [0, 0, 0, 0], strides: ints = [1, 1]> (cast_in0, cast_weight, cast_bias)
   cast_bf16 = Cast <to: int = 16> (conv0)
   cast_out0 = Cast <to: int = 1> (cast_bf16)
}

// CHECK-LABEL:   func.func @main_graph(
// CHECK-SAME:                          %[[VAL_0:.*]]: tensor<1x1x32x32xf32> {onnx.name = "input"}) -> (tensor<1x1x30x30xf32> {onnx.name = "cast_out0"}) {
// CHECK:           %[[VAL_1:.*]] = onnx.Constant dense<1.500000e+00> : tensor<1xf32>
// CHECK:           %[[VAL_2:.*]] = onnx.Constant dense<{{\[\[}}{{\[\[}}0.000000e+00, 1.000000e+00, -1.000000e+00], [0.000000e+00, 1.000000e+00, 0.000000e+00], [-1.000000e+00, 1.000000e+00, -1.000000e+00]]]]> : tensor<1x1x3x3xf32>
// CHECK:           %[[VAL_3:.*]] = "onnx.Cast"(%[[VAL_0]]) {onnx_node_name = "onnx.Cast_0", saturate = 1 : si64, to = bf16} : (tensor<1x1x32x32xf32>) -> tensor<1x1x32x32xbf16>
// CHECK:           %[[VAL_4:.*]] = "onnx.Cast"(%[[VAL_3]]) {onnx_node_name = "onnx.Cast_1", saturate = 1 : si64, to = f32} : (tensor<1x1x32x32xbf16>) -> tensor<1x1x32x32xf32>
// CHECK:           %[[VAL_5:.*]] = "onnx.Conv"(%[[VAL_4]], %[[VAL_2]], %[[VAL_1]]) {auto_pad = "NOTSET", dilations = [1, 1], group = 1 : si64, kernel_shape = [3, 3], onnx_node_name = "onnx.Conv_2", pads = [0, 0, 0, 0], strides = [1, 1]} : (tensor<1x1x32x32xf32>, tensor<1x1x3x3xf32>, tensor<1xf32>) -> tensor<1x1x30x30xf32>
// CHECK:           %[[VAL_6:.*]] = "onnx.Cast"(%[[VAL_5]]) {onnx_node_name = "onnx.Cast_3", saturate = 1 : si64, to = bf16} : (tensor<1x1x30x30xf32>) -> tensor<1x1x30x30xbf16>
// CHECK:           %[[VAL_7:.*]] = "onnx.Cast"(%[[VAL_6]]) {onnx_node_name = "onnx.Cast_4", saturate = 1 : si64, to = f32} : (tensor<1x1x30x30xbf16>) -> tensor<1x1x30x30xf32>
// CHECK:           return %[[VAL_7]] : tensor<1x1x30x30xf32>
// CHECK:         }
// CHECK:         "onnx.EntryPoint"() {func = @main_graph} : () -> ()
