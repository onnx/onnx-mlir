/*
 * SPDX-License-Identifier: Apache-2.0
 */

//===----------------- Auto-Generated, do not change  ---------------------===//
//
// Copyright 2025 The IBM Research Authors.
// Generated by the utils/NNPAOpPerfModel/generateModel.ipynb
// See Readme in that directory for more info.
//
// =============================================================================

// Operation Add_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Add_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9794305300045331
  return 1.0414597616987286e-06 + 9.436133475545827e-11 * complexity;
}
// Operation Add_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Add_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9697580789334318
  return 1.8567493018624777e-06 + 1.9088979028012123e-11 * complexity +
         1.9088979028012123e-11 * complexity2;
}

// Operation Div_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Div_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9998048175945131
  return 5.786938996660593e-07 + 1.3646311059272094e-09 * complexity;
}
// Operation Div_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Div_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.990816705245199
  return 1.980349705611261e-06 + 2.942935466811418e-11 * complexity +
         2.942935466811418e-11 * complexity2;
}

// Operation Exp_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Exp_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.89242570724948
  return -5.1801798144228634e-05 + 6.21757000288656e-09 * complexity;
}
// Operation Exp_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Exp_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.999015162322293
  return 2.085593685056712e-06 + 2.6182534527148465e-11 * complexity +
         2.6182534527148458e-11 * complexity2;
}

// Operation Gelu_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Gelu_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9996558252290894
  return 5.0765999634455865e-06 + 1.10312695415442e-08 * complexity;
}
// Operation Gelu_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Gelu_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9991600550763047
  return 1.7614607196673564e-06 + 3.574799081041781e-11 * complexity +
         3.5747990810417806e-11 * complexity2;
}

// Operation Log_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Log_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9781276143547772
  return -4.529738358558183e-05 + 6.783445144043389e-09 * complexity;
}
// Operation Log_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Log_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9987930417510681
  return 2.0534086916963085e-06 + 3.111607458075494e-11 * complexity +
         3.111607458075493e-11 * complexity2;
}

// Operation MatMul_3ds: estimated times.
static double arch15_estimatedTimeForCPU_MatMul_3ds(
    double B, double N, double M, double K) {
  double complexity = B * (N * M * K);
  // Regression for CPU with r2 = 0.9884079270433619
  return 1.855222799861678e-06 + 5.050650951084619e-11 * complexity;
}
// Operation MatMul_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_MatMul_3ds(
    double B, double N, double M, double K) {
  double complexity =
      B * ms_ceiling(N, 2.0) * ms_ceiling(M, 64.0) * ms_ceiling(K, 64.0);
  double complexity2 =
      B * ms_ceiling(N, 32.0) * ms_ceiling(M, 64.0) * ms_ceiling(K, 64.0);
  // Regression for NNPA with r2 = 0.7060733589527228
  return 1.8259570877531345e-06 + 8.905865072399348e-13 * complexity +
         8.905865072399348e-13 * complexity2;
}

#if 0 /* not in use at this time */
// Operation MatMul_bcast23: estimated times.
static double arch15_estimatedTimeForCPU_MatMul_bcast23(double B, double N, double M, double K) {
  double complexity = B * (N * M * K);
  // Regression for CPU with r2 = 0.999572142279475
  return 1.2018540664406345e-07 + 4.950906739952868e-11 * complexity;
}
// Operation MatMul_bcast23: estimated times.
static double arch15_estimatedTimeForNNPA_MatMul_bcast23(double B, double N, double M, double K) {
  double complexity  = B * ms_ceiling(N, 2.0) * ms_ceiling(M, 64.0) * ms_ceiling(K, 64.0);
  double complexity2 = B * ms_ceiling(N, 32.0) * ms_ceiling(M, 64.0) * ms_ceiling(K, 64.0);
  // Regression for NNPA with r2 = 0.8552465991036068
  return 2.1861812921890076e-06 + 6.115654970204012e-13 * complexity +6.115654970204012e-13 * complexity2;
}
#endif

// Operation Max_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Max_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9996046252770894
  return 8.55259663295163e-07 + 9.596611822047999e-11 * complexity;
}
// Operation Max_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Max_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9926138482906947
  return 2.0761477329513936e-06 + 1.7319024656175555e-11 * complexity +
         1.7319024656175552e-11 * complexity2;
}

// Operation Min_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Min_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9993518712923539
  return 8.119717132969606e-07 + 9.641853939778113e-11 * complexity;
}
// Operation Min_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Min_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9948689360722767
  return 2.045811408687477e-06 + 1.7487925635849375e-11 * complexity +
         1.7487925635849372e-11 * complexity2;
}

// Operation Mul_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Mul_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9994096986852347
  return 8.576427061854475e-07 + 9.573075501041591e-11 * complexity;
}
// Operation Mul_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Mul_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9938418209740545
  return 2.1215713448441153e-06 + 1.713430303227113e-11 * complexity +
         1.713430303227113e-11 * complexity2;
}

// Operation Pow2_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Pow2_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9330727047521541
  return -8.210853307002942e-07 + 1.234202263969703e-10 * complexity;
}
// Operation Pow2_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Pow2_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9903205087066541
  return 2.1652601219576765e-06 + 1.898490020005764e-11 * complexity +
         1.898490020005764e-11 * complexity2;
}

// Operation Pow3_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Pow3_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.947704531709904
  return 3.3263848039024823e-06 + 2.604707783272701e-10 * complexity;
}
// Operation Pow3_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Pow3_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9939780628358914
  return 4.060614306209132e-06 + 3.5467459159039026e-11 * complexity +
         3.546745915903902e-11 * complexity2;
}

// Operation Pow4_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Pow4_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.979306482228355
  return 6.752793164225602e-07 + 2.0372887895594365e-10 * complexity;
}
// Operation Pow4_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Pow4_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9931689983532582
  return 4.268964473790506e-06 + 3.438648077067066e-11 * complexity +
         3.438648077067066e-11 * complexity2;
}

// Operation Pow8_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Pow8_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9999063396503455
  return 1.649910604587757e-06 + 2.8617211971025847e-10 * complexity;
}
// Operation Pow8_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Pow8_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9948502081739099
  return 6.142811336589455e-06 + 5.192920606428397e-11 * complexity +
         5.192920606428396e-11 * complexity2;
}

// Operation ReduceMean_4d: estimated times.
static double arch15_estimatedTimeForCPU_ReduceMean_4d(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9641896473441319
  return -3.44566941822172e-08 + 1.2715126545232464e-10 * complexity;
}
// Operation ReduceMean_4d: estimated times.
static double arch15_estimatedTimeForNNPA_ReduceMean_4d(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.23925537331066915
  return 1.130230016902706e-05 + 9.610791426943572e-12 * complexity +
         9.610791426943571e-12 * complexity2;
}

// Operation Relu_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Relu_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.999247901534308
  return 8.67113022326907e-07 + 9.427073286069188e-11 * complexity;
}
// Operation Relu_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Relu_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9989466394839843
  return 1.9854210655045904e-06 + 2.3131281524078758e-11 * complexity +
         2.3131281524078754e-11 * complexity2;
}

// Operation Sigmoid_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Sigmoid_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.6694863546412586
  return -0.0003110638128148975 + 1.0198957146700573e-08 * complexity;
}
// Operation Sigmoid_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Sigmoid_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9996518891423859
  return 2.261770046260627e-06 + 3.764323249035518e-11 * complexity +
         3.764323249035517e-11 * complexity2;
}

// Operation Softmax_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Softmax_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9941480124435297
  return 4.922124351942512e-06 + 7.895222736377622e-09 * complexity;
}
// Operation Softmax_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Softmax_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.7698271519020907
  return -1.6582951337863099e-06 + 9.546897460120308e-10 * complexity +
         9.546897460120308e-10 * complexity2;
}

// Operation Stick_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Stick_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9573201775683942
  return 7.223242630385479e-07 + 8.501740539965986e-11 * complexity;
}
// Operation Stick_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Stick_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.6906958856336693
  return 1.4650992868656998e-06 + 1.5980625370318473e-10 * complexity +
         1.5980625370318473e-10 * complexity2;
}

// Operation Sub_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Sub_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9994300646660222
  return 8.53949178130232e-07 + 9.552545176353334e-11 * complexity;
}
// Operation Sub_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Sub_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9953310347130198
  return 2.3492432002936522e-06 + 1.723261703570422e-11 * complexity +
         1.723261703570422e-11 * complexity2;
}

// Operation Tanh_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Tanh_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9992625489601716
  return 3.2369598896957175e-07 + 1.4078506521178395e-09 * complexity;
}
// Operation Tanh_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Tanh_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.9960934032072877
  return 1.9722513558089736e-06 + 1.790114983535808e-11 * complexity +
         1.7901149835358073e-11 * complexity2;
}

// Operation Unstick_3ds: estimated times.
static double arch15_estimatedTimeForCPU_Unstick_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * e2 * e1;
  // Regression for CPU with r2 = 0.9932274704371545
  return 7.653934223015085e-07 + 1.389382010359011e-10 * complexity;
}
// Operation Unstick_3ds: estimated times.
static double arch15_estimatedTimeForNNPA_Unstick_3ds(
    double e3, double e2, double e1) {
  double complexity = e3 * ms_ceiling(e2, 2.0) * ms_ceiling(e1, 64.0);
  double complexity2 = e3 * ms_ceiling(e2, 32.0) * ms_ceiling(e1, 64.0);
  // Regression for NNPA with r2 = 0.4294645871109005
  return 1.0784429022719318e-05 + 1.569351314487559e-10 * complexity +
         1.5693513144875584e-10 * complexity2;
}
