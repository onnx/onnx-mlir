# SPDX-License-Identifier: Apache-2.0

# Match the minimum required version of LLVM and MLIR
cmake_minimum_required(VERSION 3.13.4)

project(onnx-mlir)

option(ONNX_MLIR_BUILD_TESTS "Build ONNX-MLIR test executables. If OFF, just generate build targets." ON)
option(ONNX_MLIR_CCACHE_BUILD "Set to ON for a ccache enabled build." OFF)
option(ONNX_MLIR_ENABLE_WERROR "Enable warnings as errors." OFF)
option(ONNX_MLIR_SUPPRESS_THIRD_PARTY_WARNINGS "Suppress warning in third_party code." ON)

# On systems that still have legacy lib64 directories (e.g., rhel/fedora,
# etc.), by default some components (e.g., cmake) install into lib while
# others (e.g., python) install into lib64.
# This causes trouble when we try to figure out the runtime directory in
# CompilerUtils.cpp::getRuntimeDir(). So we explicitly set CMAKE_INSTALL_LIBDIR
# to install into lib on all systems so we don't have to deal with lib64.
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_INSTALL_LIBDIR lib)

if (NOT CMAKE_BUILD_TYPE)
  message(STATUS "No build type selected, default to Debug")
  set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build type (default Debug)" FORCE)
endif()

# CMP0116: Ninja generators transform `DEPFILE`s from `add_custom_command()`
# New in CMake 3.20. https://cmake.org/cmake/help/latest/policy/CMP0116.html
# Use the same setting as llvm-project
if (POLICY CMP0116)
  cmake_policy(SET CMP0116 OLD)
endif()

if (MSVC)
  # Disable warnings generated by onnx but treated as errors by onnx
  # See: https://github.com/onnx/onnx/issues/3530
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -wd4125")
endif()

# Enable ccache
# This setup is sufficient for Ninja and Makefiles, but not Xcode
if (ONNX_MLIR_CCACHE_BUILD)
  find_program(CCACHE_PROGRAM ccache)
  if (CCACHE_PROGRAM)
    if (CMAKE_SYSTEM_NAME MATCHES "Windows")
      # RULE_LAUNCH_COMPILE is more powerful than C_COMPILER_LAUNCHER (ccache
      # supports additional compilers) but has issues with cmd and MSVC tools
      set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM})
      set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM})     
    else()
      set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM})
    endif()
  else()
    message(FATAL_ERROR "Unable to find the program ccache. Set ONNX_MLIR_CCACHE_BUILD to OFF.")
  endif()
endif()

# Enable warnings as errors
# Leverage the imported LLVM_ENABLE_WERROR for compiler logic
set(LLVM_ENABLE_WERROR ${ONNX_MLIR_ENABLE_WERROR})

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>/bin)
set(CMAKE_INCLUDE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/$<CONFIG>/include)

set(ONNX_MLIR_SRC_ROOT ${CMAKE_CURRENT_SOURCE_DIR})
set(ONNX_MLIR_BIN_ROOT ${CMAKE_CURRENT_BINARY_DIR})

set(ONNX_MLIR_LIBRARY_PATH ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
set(ONNX_MLIR_RUNTIME_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(ONNX_MLIR_INCLUDE_PATH ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})

set(ONNX_MLIR_VENDOR ${PACKAGE_VENDOR} CACHE STRING
  "Vendor-specific text for showing with version information.")

include(CTest)
include(ExternalProject)
include(MLIR.cmake)

# MLIR.cmake calls find_package(MLIR) which sets LLVM_MINIMUM_PYTHON_VERSION
if (WIN32)
  # On Windows, only search the environment for Python (instead of also checking the registry).
  # This allows us to pick up the correct version of Python instead of always picking the latest
  # installed on the machine.
  set(Python3_FIND_REGISTRY NEVER)
endif()

find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED COMPONENTS Interpreter Development)

# On MacOS, find_package for Java and JNI doesn't work if JAVA_INCLUDE_PATH
# and JAVA_INCLUDE_PATH2 are not set. Setting them requires JAVA_HOME to be
# known. If the JAVA_HOME env var isn't set, we try to figure it out by running
# java and looking for the java.home property.
if(APPLE)
  set(JAVA_HOME $ENV{JAVA_HOME})
  if ("${JAVA_HOME}" STREQUAL "")
    execute_process(
      COMMAND bash -c "java -XshowSettings:properties -version 2>&1 | \
                       sed -n 's/[ \t]*java.home = //p'"
      OUTPUT_STRIP_TRAILING_WHITESPACE
      OUTPUT_VARIABLE JAVA_HOME)
  endif()
  if (NOT "${JAVA_HOME}" STREQUAL "")
    SET(JAVA_INCLUDE_PATH  "${JAVA_HOME}/include")
    SET(JAVA_INCLUDE_PATH2 "${JAVA_HOME}/include/darwin")
  endif()
endif()

# Don't require AWT to allow headless JDK to reduce docker image size
set(JAVA_AWT_INCLUDE_PATH headless)
set(JAVA_AWT_LIBRARY headless)
find_package(Java COMPONENTS Development)
find_package(JNI)

if (Java_Development_FOUND AND JNI_FOUND)
  set(ONNX_MLIR_ENABLE_JNI TRUE)
  include(UseJava)
else()
  set(ONNX_MLIR_ENABLE_JNI FALSE)
  message(WARNING "Java Development component or JNI not found, JNI targets will not work")
endif()

# The onnx build on windows requires the provision of either static or shared libs for protobuf
# and to achieve that there are several different flags that need to be set in protobuf, onnx
# as well as cmake (for find_package). At the very minimum ONNX_USE_PROTOBUF_SHARED_LIBS and
# Protobuf_USE_STATIC_LIBS need to be opposites of each other, but onnx does not currently set them
# up that way (onnx doesn't set Protobuf_USE_STATIC_LIBS at all and cmake interprets that as setting
# Protobuf_USE_STATIC_LIBS to OFF). If/when onnx is updated to correctly set up both variables,
# this can be removed (see https://github.com/onnx/onnx/issues/3345).
# We are setting CMP0077 to NEW here, so that onnx does not override our regular variables for
# protobuf when the project is included below.
if (POLICY CMP0077)
  set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
endif (POLICY CMP0077)
if (NOT DEFINED ONNX_USE_PROTOBUF_SHARED_LIBS AND NOT DEFINED Protobuf_USE_STATIC_LIBS)
  set(ONNX_USE_PROTOBUF_SHARED_LIBS OFF)
  set(Protobuf_USE_STATIC_LIBS ON)
elseif (NOT DEFINED Protobuf_USE_STATIC_LIBS)
  if (ONNX_USE_PROTOBUF_SHARED_LIBS)
    set(Protobuf_USE_STATIC_LIBS OFF)
  else()
    set(Protobuf_USE_STATIC_LIBS ON)
  endif()
elseif (NOT DEFINED ONNX_USE_PROTOBUF_SHARED_LIBS)
  if (Protobuf_USE_STATIC_LIBS)
    set(ONNX_USE_PROTOBUF_SHARED_LIBS OFF)
  else()
    set(ONNX_USE_PROTOBUF_SHARED_LIBS ON)
  endif()
elseif ((ONNX_USE_PROTOBUF_SHARED_LIBS AND Protobuf_USE_STATIC_LIBS)
         OR (NOT ONNX_USE_PROTOBUF_SHARED_LIBS AND NOT Protobuf_USE_STATIC_LIBS))
  message(FATAL_ERROR
    "ONNX_USE_PROTOBUF_SHARED_LIBS and Protobuf_USE_STATIC_LIBS must be opposites of each other.")
endif()

# Use the new MSVC preprocessor to improve standard conformance.
if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC") 
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Zc:preprocessor")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:preprocessor")
endif()

# Suppress warnings in third party code.
if (ONNX_MLIR_SUPPRESS_THIRD_PARTY_WARNINGS)
  set(CMAKE_C_FLAGS_COPY ${CMAKE_C_FLAGS})
  set(CMAKE_CXX_FLAGS_COPY ${CMAKE_CXX_FLAGS})
  if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")
  elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC") 
    # MSVC complains when overriding existing warning levels flags, remove
    # them and add "/W".
    STRING(REGEX REPLACE "/W[0-9]" "/W0" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})  
    STRING(REGEX REPLACE "/W[0-9]" "/W0" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
  endif()
endif()

# Add third party subdirectories and define options appropriate to run their cmakes.
set(CMAKE_MESSAGE_LOG_LEVEL NOTICE)
set(pybind11_FIND_QUIETLY ON)
set(BENCHMARK_USE_BUNDLED_GTEST OFF)
set(BENCHMARK_ENABLE_GTEST_TESTS OFF)
set(BENCHMARK_ENABLE_TESTING OFF)
add_subdirectory(third_party/onnx)
add_subdirectory(third_party/pybind11)
add_subdirectory(third_party/rapidcheck)
add_subdirectory(third_party/mlir-hlo EXCLUDE_FROM_ALL)
if (NOT TARGET benchmark)
  add_subdirectory(third_party/benchmark)
endif()
set(CMAKE_MESSAGE_LOG_LEVEL STATUS)

# Ensure warnings are reported for onnx-mlir code.
if (ONNX_MLIR_SUPPRESS_THIRD_PARTY_WARNINGS)
  set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS_COPY})
  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_COPY})
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSUPPRESS_THIRD_PARTY_WARNINGS")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSUPPRESS_THIRD_PARTY_WARNINGS")
endif()

add_subdirectory(utils)
add_subdirectory(include)
add_subdirectory(src)
add_subdirectory(docs)
add_subdirectory(test)
