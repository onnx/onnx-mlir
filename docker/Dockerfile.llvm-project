# By default, use ubuntu:jammy, remember to change Jenkins build script as well
ARG BASE_IMAGE="ghcr.io/onnxmlir/ubuntu:jammy"
FROM ${BASE_IMAGE}

# Label the image for various checking and cleanup
ARG LLVM_PROJECT_SHA1
ARG LLVM_PROJECT_SHA1_DATE
ARG LLVM_PROJECT_DOCKERFILE_SHA1
ARG ONNX_MLIR_PR_NUMBER
ARG ONNX_MLIR_PR_NUMBER2
LABEL llvm_project_sha1=${LLVM_PROJECT_SHA1}
LABEL llvm_project_sha1_date=${LLVM_PROJECT_SHA1_DATE}
LABEL llvm_project_dockerfile_sha1=${LLVM_PROJECT_DOCKERFILE_SHA1}
LABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}
LABEL onnx_mlir_pr_number2=${ONNX_MLIR_PR_NUMBER2}

ARG NPROC=4
ARG WORK_DIR=/workdir
WORKDIR ${WORK_DIR}

# Install tools needed
RUN distro=$(cat /etc/os-release|grep -Po '(?<=^ID=").*(?=")|(?<=^ID=)[^"].*[^"]') \
    && TZ="America/New_York" \
    && if [ "${distro}" = "debian" ] || [ "${distro}" = "ubuntu" ]; then \
          DEBIAN_FRONTEND=noninteractive && \
          apt-get update -qq && \
          apt-get install -qq -y --no-install-recommends tzdata && \
          ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime && \
          dpkg-reconfigure -f noninteractive tzdata && \
          apt-get install -qq -y --no-install-recommends \
                  autoconf automake ca-certificates clang cmake cppcheck \
                  curl default-jdk-headless gcc g++ git libncurses-dev \
                  libtool make maven ninja-build openjdk-11-jdk-headless \
                  python3 python3-dev python3-distutils python3-numpy \
                  python3-pip python3-pytest-xdist python3-setuptools \
                  python3-typing-extensions unzip zip zlib1g-dev && \
          rm -rf /var/lib/apt/lists/* && \
          ln -sf /usr/bin/pytest-3 /usr/bin/pytest; \
       elif [ "${distro}" = "rhel" ] || [ "${distro}" = "fedora" ]; then \
          ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime && \
          ([ -x /usr/bin/microdnf ] && microdnf install -y yum) && \
          RHEL_VERSION=$(grep CPE_NAME /etc/os-release | cut -d':' -f5) && \
          yum install -q -y \
              https://dl.fedoraproject.org/pub/epel/epel-release-latest-${RHEL_VERSION}.noarch.rpm && \
          yum update -q -y && \
          yum install -q -y \
              autoconf automake ca-certificates clang cmake diffutils \
              file java-11-openjdk-devel java-11-openjdk-headless \
              gcc gcc-c++ git libtool make ncurses-devel ninja-build \
              python39 python39-devel python39-pip python39-setuptools \
              python39-wheel tzdata-java unzip which zip zlib-devel && \
          # Workaround broken ubi8 amd64 image installing python3.12 as
          # dependency of clang, which also breaks the /usr/bin/pip3
          # symlink creation
          ([ -f /usr/bin/python3.12 ] && yum remove -y python3.12 || true) && \
          # Use same versions as those in ubuntu:jammy
          pip3 install -q \
               Cython pytest==6.2.5 numpy==1.21.5 pytest-forked==1.4.0 \
               pytest-xdist==2.5.0 typing-extensions==3.10.0.2 && \
          rm -rf /var/cache/dnf/* && \
          echo -e "/usr/local/lib" > /etc/ld.so.conf.d/local.conf; \
       fi \
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && pip3 install --upgrade pip \
    && rm -rf ${HOME}/.cache

# Install bazel
ARG BAZEL_VERSION=6.5.0
ARG BAZEL_URL=https://github.com/bazelbuild/bazel/releases/download
RUN curl -sL ${BAZEL_URL}/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip \
         -o bazel-${BAZEL_VERSION}-dist.zip \
    && unzip -q -d bazel-${BAZEL_VERSION} bazel-${BAZEL_VERSION}-dist.zip \
    && rm -f bazel-${BAZEL_VERSION}-dist.zip \
    && cd bazel-${BAZEL_VERSION} \
    && EXTRA_BAZEL_ARGS="--show_progress_rate_limit=60 \
                         --color=no \
                         --curses=yes \
                         --copt=-Wno-error=implicit-fallthrough \
                         --host_javabase=@local_jdk//:jdk \
                         --verbose_failures" \
       BAZEL_JAVAC_OPTS="-J-Xmx4g -J-Xms1g" ./compile.sh \
    && cp output/bazel /usr/local/bin \
    && cd .. && rm -rf bazel-${BAZEL_VERSION} ${HOME}/.cache

# Install rust, cargo, and cargo-bazel
ARG RUST_VERSION=1.88
ARG CARGO_BAZEL_VERSION=0.16.0
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
    sh -s -- -y --default-toolchain none \
    && . "${HOME}/.cargo/env" \
    && rustup install ${RUST_VERSION} \
    && cargo install cargo-bazel --version ${CARGO_BAZEL_VERSION}

# Install absl for new version of protobuf
ARG ABSL_VERSION=20240722.1
ARG ABSL_URL=https://github.com/abseil/abseil-cpp.git
ARG ABSL_DIR=abseil-cpp
RUN git clone -b ${ABSL_VERSION} --recursive ${ABSL_URL} ${ABSL_DIR} \
    && mkdir -p ${ABSL_DIR}/build \
    && cd ${ABSL_DIR}/build \
    && CC=clang CXX=clang++ \
       cmake -DCMAKE_INSTALL_LIBDIR=lib \
             -DABSL_PROPAGATE_CXX_STD=ON \
             -DBUILD_SHARED_LIBS=ON .. \
    && make -j${NPROC} install && ldconfig \
    && cd ../.. && rm -rf ${ABSL_DIR} ${HOME}/.cache

# Install protobuf
ARG PROTOBUF_VERSION=6.31.1
ARG PROTOBUF_URL=https://github.com/protocolbuffers/protobuf.git
ARG PROTOBUF_DIR=protobuf
RUN git clone -b v${PROTOBUF_VERSION} --recursive ${PROTOBUF_URL} ${PROTOBUF_DIR} \
    && mkdir -p ${PROTOBUF_DIR}/build \
    && cd ${PROTOBUF_DIR}/build \
    # Must specify -Dprotobuf_BUILD_TESTS=OFF otherwise find_package(absl)
    # in onnx will fail due to missing protobuf::gmock target
    && CC=clang CXX=clang++ \
       cmake -DCMAKE_INSTALL_LIBDIR=lib \
             -DBUILD_SHARED_LIBS=ON \
             -Dprotobuf_BUILD_TESTS=OFF .. \
    && make -j${NPROC} install && ldconfig \
    && cd .. \
    # New version of python protobuf can no longer be built with setup.py.
    # Must use bazel to build. protobuf v6.31.1 is the first version using
    # rules_rust 0.56.0 which has s390x support. rules_buf still needs a
    # small patch.
    && export CARGO_BAZEL_GENERATOR_URL=file:///root/.cargo/bin/cargo-bazel \
    && export CARGO_BAZEL_REPIN=true \
    && CC=clang CXX=clang++ bazel fetch //python/dist:binary_wheel \
    && sed -i -e 's/\["arm64", "amd64"\]/\["arm64", "amd64", "s390x"\]/g' \
           ${HOME}/.cache/bazel/_bazel_root/*/external/rules_buf/buf/internal/toolchain.bzl \
    && CC=clang CXX=clang++ bazel build //python/dist:binary_wheel \
    && pip3 install bazel-bin/python/dist/protobuf-${PROTOBUF_VERSION}-*.whl \
    && cd .. && rm -rf ${PROTOBUF_DIR} ${HOME}/.cache

# Install jsoniter
ARG JSONITER_VERSION=0.9.23
RUN JSONITER_URL=https://repo1.maven.org/maven2/com/jsoniter/jsoniter/${JSONITER_VERSION} \
    && JSONITER_FILE=jsoniter-${JSONITER_VERSION}.jar \
    && curl -s ${JSONITER_URL}/${JSONITER_FILE} -o /usr/share/java/${JSONITER_FILE}

# Clone and build llvm-project and run tests
ARG BUILD_SHARED_LIBS=OFF
RUN git clone -n https://github.com/llvm/llvm-project.git \
    && cd llvm-project \
    && git checkout ${LLVM_PROJECT_SHA1} \
    && mkdir -p build && cd build \
# Build with clang since gcc on ppc64le doesn't support __builtin_thread_pointer
    && CC=clang CXX=clang++ \
       cmake -G Ninja ../llvm \
             -DLLVM_ENABLE_PROJECTS=mlir \
             -DLLVM_TARGETS_TO_BUILD="host" \
             -DCMAKE_BUILD_TYPE=Release \
             -DLLVM_ENABLE_ASSERTIONS=ON \
             -DLLVM_ENABLE_RTTI=ON \
             -DLLVM_ENABLE_LIBEDIT=OFF \
             -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} \
    && cmake --build . --parallel ${NPROC} -- ${MAKEFLAGS} \
    && (cmake --build . --parallel ${NPROC} --target check-mlir || \
        [ "$(uname -m)" = "s390x" ]) \
    && rm -rf /tmp/* \
    && echo "llvm-project commit $(git rev-parse HEAD) successfully built"

LABEL llvm_project_successfully_built=yes
