# By default, use ubuntu:focal
ARG BASE_IMAGE="ubuntu:focal"
FROM ${BASE_IMAGE}

# Label the image for various checking and cleanup
ARG LLVM_PROJECT_SHA1
ARG LLVM_PROJECT_SHA1_DATE
ARG LLVM_PROJECT_DOCKERFILE_SHA1
ARG ONNX_MLIR_PR_NUMBER
LABEL llvm_project_sha1=${LLVM_PROJECT_SHA1}
LABEL llvm_project_sha1_date=${LLVM_PROJECT_SHA1_DATE}
LABEL llvm_project_dockerfile_sha1=${LLVM_PROJECT_DOCKERFILE_SHA1}
LABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}

ARG WORK_DIR=/workdir
WORKDIR ${WORK_DIR}

# Install tools needed
RUN DEBIAN_FRONTEND=noninteractive TZ="America/New_York" \
    apt-get update -qq \
    && apt-get install -qq -y --no-install-recommends tzdata \
    && apt-get install -qq -y --no-install-recommends \
               autoconf automake ca-certificates cmake gcc g++ git \
	       libncurses-dev libtool make ninja-build openjdk-11-jdk-headless \
               python3 python3-dev python3-distutils python3-numpy python3-pip \
	       python3-pybind11 python3-pytest-xdist python3-setuptools \
	       python3-typing-extensions wget zlib1g-dev \
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && ln -sf /usr/bin/pytest-3 /usr/bin/pytest \
    && rm -rf /var/lib/apt/lists/*

# Clone and build llvm-project
COPY utils/clone-mlir.sh /tmp
RUN . /tmp/clone-mlir.sh && rm -f /tmp/clone-mlir.sh

ARG BUILD_SHARED_LIBS=OFF

# Install protobuf 3.14.0
RUN git clone -b v3.14.0 --recursive https://github.com/google/protobuf.git \
    && cd protobuf && ./autogen.sh \
    && ./configure --enable-static=$([[ "${BUILD_SHARED_LIBS}" = "OFF" ]] && \
                                     echo yes || echo no) \
    && make -j$(nproc) install && ldconfig \
    && cd .. && rm -rf protobuf

# Build llvm-project and run tests
RUN cd llvm-project && mkdir build && cd build \
    && cmake -G Ninja ../llvm \
       	     -DLLVM_ENABLE_PROJECTS=mlir \
             -DLLVM_BUILD_EXAMPLES=ON \
             -DLLVM_TARGETS_TO_BUILD="host" \
             -DCMAKE_BUILD_TYPE=Release \
             -DLLVM_ENABLE_ASSERTIONS=ON \
             -DLLVM_ENABLE_RTTI=ON \
             -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} \
    && cmake --build . --target -- ${MAKEFLAGS} \
    && (cmake --build . --target check-mlir || [ "$(uname -m)" = "s390x" ]) \
    && rm -rf /tmp/* \
    && echo "llvm-project commit $(git rev-parse HEAD) successfully built"
