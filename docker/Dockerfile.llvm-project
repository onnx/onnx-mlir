# By default, use ubuntu:jammy, remember to change Jenkins build script as well
ARG BASE_IMAGE="ghcr.io/onnxmlir/ubuntu:jammy"
FROM ${BASE_IMAGE}

# Label the image for various checking and cleanup
ARG LLVM_PROJECT_SHA1
ARG LLVM_PROJECT_SHA1_DATE
ARG LLVM_PROJECT_DOCKERFILE_SHA1
ARG ONNX_MLIR_PR_NUMBER
ARG ONNX_MLIR_PR_NUMBER2
LABEL llvm_project_sha1=${LLVM_PROJECT_SHA1}
LABEL llvm_project_sha1_date=${LLVM_PROJECT_SHA1_DATE}
LABEL llvm_project_dockerfile_sha1=${LLVM_PROJECT_DOCKERFILE_SHA1}
LABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}
LABEL onnx_mlir_pr_number2=${ONNX_MLIR_PR_NUMBER2}

ARG NPROC=4
ARG WORK_DIR=/workdir
WORKDIR ${WORK_DIR}

# Install tools needed
RUN distro=$(cat /etc/os-release|grep -Po '(?<=^ID=").*(?=")|(?<=^ID=)[^"].*[^"]') \
    && TZ="America/New_York" \
    && if [ "${distro}" = "debian" ] || [ "${distro}" = "ubuntu" ]; then \
          DEBIAN_FRONTEND=noninteractive && \
          apt-get update -qq && \
          apt-get install -qq -y --no-install-recommends tzdata && \
          ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime && \
          dpkg-reconfigure -f noninteractive tzdata && \
          apt-get install -qq -y --no-install-recommends \
                  autoconf automake ca-certificates clang cmake cppcheck \
                  curl default-jdk-headless gcc g++ git libncurses-dev \
                  libtool make maven ninja-build openjdk-11-jdk-headless \
                  python3 python3-dev python3-distutils python3-numpy \
                  python3-pip python3-pytest-xdist python3-setuptools \
                  python3-typing-extensions zlib1g-dev unzip zip && \
          rm -rf /var/lib/apt/lists/* && \
          ln -sf /usr/bin/pytest-3 /usr/bin/pytest; \
       elif [ "${distro}" = "rhel" ] || [ "${distro}" = "fedora" ]; then \
          ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime && \
          ([ -x /usr/bin/microdnf ] && microdnf install -y yum) && \
          RHEL_VERSION=$(grep CPE_NAME /etc/os-release | cut -d':' -f5) && \
          yum install -q -y \
              https://dl.fedoraproject.org/pub/epel/epel-release-latest-${RHEL_VERSION}.noarch.rpm && \
          yum update -q -y && \
          yum install -q -y \
              autoconf automake ca-certificates clang cmake diffutils \
              file java-11-openjdk-devel java-11-openjdk-headless \
              gcc gcc-c++ git libtool make ncurses-devel ninja-build \
              python39 python39-devel python39-pip python39-setuptools \
              python39-wheel tzdata-java zlib-devel unzip zip which && \
	  # Workaround broken ubi8 amd64 image installing python3.12 as
	  # dependency of clang, which also breaks the /usr/bin/pip3
	  # symlink creation
	  ([ -f /usr/bin/python3.12 ] && yum remove -y python3.12 || true) && \
          # Use same versions as those in ubuntu:jammy
          pip3 install -q \
               Cython pytest==6.2.5 numpy==1.21.5 pytest-forked==1.4.0 \
               pytest-xdist==2.5.0 typing-extensions==3.10.0.2 && \
          rm -rf /var/cache/dnf/* && \
          echo -e "/usr/local/lib" > /etc/ld.so.conf.d/local.conf; \
       fi \
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && pip3 install --upgrade pip

# # --- Install Bazelisk (Bazel version manager) --- doesn't work on s390x and ppc64le
# RUN curl -L -o /usr/local/bin/bazel https://github.com/bazelbuild/bazelisk/releases/download/v1.18.0/bazelisk-linux-amd64 && \
#     chmod +x /usr/local/bin/bazel && \
#     echo "7.0.0" > ~/.bazelversion && \
#     bazel --version


# # --- Build and install protobuf using Bazel with Bzlmod ---
# ARG PROTOBUF_VERSION=25.1
# ARG INSTALL_PROTOBUF_PATH=/usr/local
# ARG BUILD_TYPE=Release
# ARG CORE_NUMBER=2
# # ARG ORIGINAL_PATH=${pwd}

# # Install dependencies
# #RUN yum install -y wget git gcc-c++ make ninja-build python3 python3-pip cmake python3-devel

# # Download and extract Abseil and Protobuf sources
# RUN git clone --recurse-submodules -b v25.1 https://github.com/protocolbuffers/protobuf.git /workdir/protobuf-25.1
# #RUN cd / && \
#    # wget https://github.com/abseil/abseil-cpp/releases/download/20230802.2/abseil-cpp-20230802.2.tar.gz && \
#    # tar -xvf abseil-cpp-20230802.2.tar.gz && \
#    # wget https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-${PROTOBUF_VERSION}.tar.gz && \
#    # tar -xvf protobuf-${PROTOBUF_VERSION}.tar.gz

# # Build and install Protobuf (static libs, no tests)
# RUN cd /workdir/protobuf-${PROTOBUF_VERSION} && \
#     mkdir build_source && cd build_source && \
#     cmake -G Ninja ../ \
#           -DBUILD_SHARED_LIBS=OFF \
#           -DCMAKE_INSTALL_PREFIX=$INSTALL_PROTOBUF_PATH \
#           -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
#           -Dprotobuf_BUILD_TESTS=OFF \
#           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
#           # -DABSL_ROOT_DIR="${ORIGINAL_PATH}/abseil-cpp-20230802.2"\
#           -DCMAKE_CXX_STANDARD=17 \
#           -DABSL_PROPAGATE_CXX_STD=on \
#     && cmake --build . --target install --parallel $CORE_NUMBER

# # RUN export PATH=$INSTALL_PROTOBUF_PATH/include:$INSTALL_PROTOBUF_PATH/lib:$INSTALL_PROTOBUF_PATH/bin:$PATH && \
# #     export LDFLAGS="-L$INSTALL_PROTOBUF_PATH/lib" && \
# #     export CPPFLAGS="-I$INSTALL_PROTOBUF_PATH/include"

# # Set environment variables for protobuf
# ENV PATH=${INSTALL_PROTOBUF_PATH}/bin:$PATH
# ENV LD_LIBRARY_PATH=${INSTALL_PROTOBUF_PATH}/lib:$LD_LIBRARY_PATH
# ENV CPATH=${INSTALL_PROTOBUF_PATH}/include:$CPATH
# ENV LIBRARY_PATH=${INSTALL_PROTOBUF_PATH}/lib:$LIBRARY_PATH

# # Build and install Python protobuf bindings with cpp implementation support
# RUN cd /workdir/protobuf-${PROTOBUF_VERSION}/python && \
#     python3 setup.py build --cpp_implementation && \
#     python3 setup.py install && \
#     python3 -m pip install --upgrade pip setuptools wheel && \
#     PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp python3 setup.py bdist_wheel && \
#     pip3 install dist/*.whl

# # Verify versions
# #RUN protoc --version && python3 -c "import google.protobuf; print(google.protobuf.__version__)"
# RUN protoc --version && \
#     python3 -c "from google.protobuf.internal import api_implementation; \
#     print('protobuf version:', api_implementation.Version()); \
#     print('cpp_implementation:', api_implementation.Type())

# Install bazel 
RUN mkdir /usr/local/bazel && cd /usr/local/bazel && \
    curl -LO https://github.com/bazelbuild/bazel/releases/download/6.5.0/bazel-6.5.0-dist.zip  && \
    unzip bazel-6.5.0-dist.zip &&  chmod -R +w . && \
    EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" EXTRA_BAZEL_ARGS="--tool_java_runtime_version=local_jdk" bash ./compile.sh && \
    cp output/bazel /usr/local/bin/
RUN bazel --version

# Install rust, cargo, and cargo-bazel
ARG RUST_VERSION=1.88
ARG CARGO_BAZEL_VERSION=0.16.0
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
    sh -s -- -y --default-toolchain none \
    && . "${HOME}/.cargo/env" \
    && rustup install ${RUST_VERSION} \
    && cargo install cargo-bazel --version ${CARGO_BAZEL_VERSION}
#ENV PATH="${HOME}/.cargo/bin:${PATH}"

# Build and install protobuf using bazel
WORKDIR /workdir
RUN git clone --recursive https://github.com/protocolbuffers/protobuf.git
RUN cd /workdir/protobuf && git checkout v32.0 && git submodule update --init --recursive
RUN export CARGO_BAZEL_GENERATOR_URL=file:///root/.cargo/bin/cargo-bazel \
    && export CARGO_BAZEL_REPIN=true \
    && CC=clang CXX=clang++ && cd /workdir/protobuf \ 
    && CC=clang CXX=clang++ bazel fetch //python/dist:binary_wheel \
    && sed -i -e 's/\["arm64", "amd64"\]/\["arm64", "amd64", "s390x"\]/g' \
           ${HOME}/.cache/bazel/_bazel_root/*/external/rules_buf/buf/internal/toolchain.bzl \
    && CC=clang CXX=clang++ bazel build //:protobuf //:protoc
#RUN cd /workdir/protobuf && bazel build :protoc :protobuf
RUN cp /workdir/protobuf/bazel-bin/protoc /usr/local/bin && \
    cp -r /workdir/protobuf/bazel-bin/external/com_google_protobuf/python/google /usr/local/lib/python3.9/site-packages/google && \
    cp -r /workdir/protobuf/bazel-bin/external/com_google_protobuf/libprotobuf.so* /usr/local/lib && \
    ldconfig 

RUN cd /workdir/protobuf && bazel build //python/dist:binary_wheel

# Install jsoniter
ARG JSONITER_VERSION=0.9.23
RUN JSONITER_URL=https://repo1.maven.org/maven2/com/jsoniter/jsoniter/${JSONITER_VERSION} \
    && JSONITER_FILE=jsoniter-${JSONITER_VERSION}.jar \
    && curl -s ${JSONITER_URL}/${JSONITER_FILE} -o /usr/share/java/${JSONITER_FILE}

# Clone and build llvm-project and run tests
ARG BUILD_SHARED_LIBS=OFF
RUN git clone -n https://github.com/llvm/llvm-project.git \
    && cd llvm-project \
    && git checkout ${LLVM_PROJECT_SHA1} \
    && mkdir -p build && cd build \
# Build with clang since gcc on ppc64le doesn't support __builtin_thread_pointer
    && CC=clang CXX=clang++ \
       cmake -G Ninja ../llvm \
             -DLLVM_ENABLE_PROJECTS=mlir \
             -DLLVM_TARGETS_TO_BUILD="host" \
             -DCMAKE_BUILD_TYPE=Release \
             -DLLVM_ENABLE_ASSERTIONS=ON \
             -DLLVM_ENABLE_RTTI=ON \
             -DLLVM_ENABLE_LIBEDIT=OFF \
             -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} \
    && cmake --build . --parallel ${NPROC} -- ${MAKEFLAGS} \
    && (cmake --build . --parallel ${NPROC} --target check-mlir || \
        [ "$(uname -m)" = "s390x" ]) \
    && rm -rf /tmp/* \
    && echo "llvm-project commit $(git rev-parse HEAD) successfully built"

LABEL llvm_project_successfully_built=yes
