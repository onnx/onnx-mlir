ARG BASE_IMAGE
FROM ${BASE_IMAGE} AS onnx-mlir-dev-test

# Label the base image so it can be cleaned up after becoming dangling
ARG ONNX_MLIR_PR_NUMBER
ARG ONNX_MLIR_PR_NUMBER2
LABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}
LABEL onnx_mlir_pr_number2=${ONNX_MLIR_PR_NUMBER2}

ARG WORK_DIR=/workdir
WORKDIR ${WORK_DIR}

# Copy onnx-mlir from the pull request
COPY . onnx-mlir

# Setup onnx
# Install into lib instead of lib64 since everything else is in lib
RUN ONNX_ROOT=${WORK_DIR}/onnx-mlir/third_party/onnx \
    && INSTALL_LIB=$(python3 -c "import re; import site; \
         print(list(filter(lambda site: not re.search('lib64', site), \
                           site.getsitepackages()))[0])") \
    && cd ${ONNX_ROOT} \
    && python3 setup.py -q install --install-lib=${INSTALL_LIB} \
    && rm -rf .eggs .setuptools-cmake-build build dist onnx.egg-info

ARG NPROC=4
ARG ACCEL=NNPA
ARG TEST_MCPU

RUN LLVM_PROJECT_ROOT=${WORK_DIR}/llvm-project \
    && ONNX_MLIR_ROOT=${WORK_DIR}/onnx-mlir \
# Build onnx-mlir and run tests
    && cd ${ONNX_MLIR_ROOT} \
    && rm -rf build && mkdir -p build && cd build \
# NNPA acclerator is built on all archs to enable lit tests
# (dependent libzdnn is built on s390x only)
    && cmake -DMLIR_DIR=${LLVM_PROJECT_ROOT}/build/lib/cmake/mlir \
             -DCMAKE_BUILD_TYPE=Debug \
             -DONNX_MLIR_TEST_OPTLEVEL=0 \
             -DONNX_MLIR_ACCELERATORS=${ACCEL} .. \
    && make -j${NPROC} \
    && make -j${NPROC} LIT_OPTS=-v check-onnx-lit \
# Dev image is built without SIMD, placeholder for easy SIMD enablement
    && TEST_MCPU=$([ "$(uname -m)" = "s390x" ] && echo || \
                   [ "$(uname -m)" = "x86_64" ] &&  echo || \
                   [ "$(uname -m)" = "ppc64le" ] && echo || echo) \
    && TEST_ARGS="-mcpu=${TEST_MCPU}" \
    && TEST_OPTLEVEL=0 \
    && make NPROC=${NPROC} \
            CTEST_PARALLEL_LEVEL=${NPROC} \
            TEST_MCPU=${TEST_MCPU} \
            TEST_ARGS="${TEST_ARGS}" \
            TEST_OPTLEVEL=${TEST_OPTLEVEL} \
            -j${NPROC} -f CMakeFiles/Makefile2 \
            check-onnx-backend \
            check-onnx-backend-dynamic \
            check-onnx-backend-constant \
            check-onnx-backend-signature \
            check-onnx-backend-jni \
            check-onnx-backend-dynamic-jni \
            check-onnx-backend-constant-jni \
            check-onnx-backend-input-verification\
            check-onnx-numerical \
    && make check-docs \
    && rm -f Debug/bin/*Test Debug/bin/Perf* Debug/bin/Test* \
# When building for push event to publish the image, unshallow and
# rename origin to upstream to make the repo a bit more dev friendly.
    && if [ "${ONNX_MLIR_PR_NUMBER}" != "${ONNX_MLIR_PR_NUMBER2}" ]; then \
          git fetch --unshallow && \
          git remote rename origin upstream; \
       fi \
# Install joblib for model zoo tests
    && pip3 install -q joblib \
    && rm -rf /tmp/*

# Copy from onnx-mlir-dev-test to squash removed source layer and
# remove dependency on base image (onnx-mlir-llvm-static)
FROM scratch

ARG WORK_DIR=/workdir
WORKDIR ${WORK_DIR}

# Label the images for various checking and cleanup
ARG ONNX_MLIR_SHA1
ARG ONNX_MLIR_SHA1_DATE
ARG ONNX_MLIR_DOCKERFILE_SHA1
ARG ONNX_MLIR_PR_NUMBER
ARG ONNX_MLIR_PR_NUMBER2
LABEL onnx_mlir_sha1=${ONNX_MLIR_SHA1}
LABEL onnx_mlir_sha1_date=${ONNX_MLIR_SHA1_DATE}
LABEL onnx_mlir_dockerfile_sha1=${ONNX_MLIR_DOCKERFILE_SHA1}
LABEL onnx_mlir_pr_number=${ONNX_MLIR_PR_NUMBER}
LABEL onnx_mlir_pr_number2=${ONNX_MLIR_PR_NUMBER2}

COPY --from=onnx-mlir-dev-test / /
CMD [ "/bin/bash" ]
LABEL onnx_mlir_successfully_built=yes
