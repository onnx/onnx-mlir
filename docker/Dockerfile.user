# By default, use ubuntu:focal
ARG BASE_IMAGE="ubuntu:focal"
FROM ${BASE_IMAGE}

ARG CPU_ARCH

WORKDIR /workdir

# Install tools needed
RUN DEBIAN_FRONTEND=noninteractive TZ="America/New_York" \
    apt-get update \
    && apt-get install -y --no-install-recommends tzdata \
    && apt-get install -y --no-install-recommends \
               ca-certificates cmake gcc g++ git \
               libncurses-dev libprotobuf-dev \
               make ninja-build openjdk-8-jdk-headless protobuf-compiler \
               python3 python3-dev python3-distutils python3-setuptools wget zlib1g-dev \
    && ln -sf /usr/bin/python3 /usr/bin/python \
# Clone onnx-mlir but don't build yet. Just use clone-mlir.sh to clone the
# specific llvm-project commit it needs
    && git clone --recursive https://github.com/onnx/onnx-mlir.git \
    && . /workdir/onnx-mlir/utils/clone-mlir.sh \
# Build llvm-project and copy llc and opt needed by onnx-mlir
    && cd /workdir/llvm-project \
    && mkdir build \
    && cd build \
    && cmake -G Ninja ../llvm \
       	     -DLLVM_ENABLE_PROJECTS=mlir \
             -DLLVM_BUILD_EXAMPLES=ON \
             -DLLVM_TARGETS_TO_BUILD="host" \
             -DCMAKE_BUILD_TYPE=Release \
             -DLLVM_ENABLE_ASSERTIONS=ON \
             -DLLVM_ENABLE_RTTI=ON \
    && cmake --build . --target -- ${MAKEFLAGS} \
    && cp bin/llc bin/opt /usr/local/bin \
# Build and install onnx-mlir
    && cd /workdir/onnx-mlir \
    && mkdir build \
    && cd build \
    && LLVM_PROJ_SRC=/workdir/llvm-project \
       LLVM_PROJ_BUILD=/workdir/llvm-project/build \
       cmake .. \
    && make -j$(nproc) install \
# Clean up
    && cd /workdir \
    && apt-get purge --autoremove -y cmake git make ninja-build \
               protobuf-compiler python3 wget \
    && rm -rf /var/lib/apt/lists/* /usr/bin/python llvm-project onnx-mlir

ENTRYPOINT [ "onnx-mlir" ]
CMD [ "--help" ]
